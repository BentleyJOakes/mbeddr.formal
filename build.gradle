import de.itemis.mps.gradle.*

//will pull the groovy classes/types from nexus to the classpath
buildscript {
    repositories {
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    }
    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.2+'
    }
}

plugins {
    id 'base'
    id 'maven-publish'
    id 'co.riiid.gradle' version '0.4.2'
}


// detect if we are in a CI build
if (project.hasProperty("forceCI")) {
    ext.ciBuild = true
} else {
    //on teamcity we are in a CI build
    if (project.hasProperty("teamcity") && !project.hasProperty('mpsHomeDir')) {
        ext.ciBuild = true
    } else {
        ext.ciBuild = false
    }
}

// comprehensible error message if not running java 8
if(JavaVersion.current() != JavaVersion.VERSION_1_8){
    throw new GradleException("This build script requires java " + JavaVersion.VERSION_1_8 + ", but you are currently using " + JavaVersion.current())
}
// Detect jdk location, required to start ant with tools.jar on classpath otherwise javac and tests will fail
def java_home = System.properties['java.home']
def jdk_home = java_home
if (!file("$jdk_home/lib/tools.jar").isFile()) {
    jdk_home = jdk_home + "/.."
}
if (!file("$jdk_home/lib/tools.jar").isFile()) {
    throw new GradleException("Was not able to locate jdk home folder. Use 'jdk_home' project variable to specify JDK location explicitly. Current JAVA_HOME is: $java_home")
}
ext.jdk_home = jdk_home

// Default repository credentials
if (!project.hasProperty('nexusUsername')) {
    ext.nexusUsername = ''
    ext.nexusPassword = ''
}
logger.info 'Repository username: {}', project.nexusUsername

ext.dependencyRepositories = [
        'https://projects.itemis.de/nexus/content/repositories/mbeddr',
        'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots',
]
// Dependency versions

ext.mpsVersion =  '2019.1.4'
ext.mbeddrVersion =  '1.3.21722.0d19fb0'


if (ciBuild) {
    String branch = GitBasedVersioning.gitBranch

    def buildNumber = System.env.BUILD_NUMBER.toInteger()
    if (branch.startsWith("maintenance") || branch.startsWith("mps")) {
        version = "$major.$minor.$buildNumber.${GitBasedVersioning.gitShortCommitHash}"
    } else {
        version = GitBasedVersioning.getVersionWithCount(major, minor, buildNumber)
    }

    println "##teamcity[buildNumber '${version}']"
} else {
    println "Local build detected, version will be SNAPSHOT"
    version = "1.0-SNAPSHOT"
}

/*
def userHome = System.properties['user.home']
def mpsPluginsDirPattern
if (System.properties['os.name'].toLowerCase().contains('mac')) {
    mpsPluginsDirPattern = "$userHome/Library/Application Support/%s"
} else {
    mpsPluginsDirPattern = "$userHome/.%s/config/plugins"
}

if (project.hasProperty("MPS_PATHS_SELECTOR")) {
    ext.mpsPluginsDir = sprintf(mpsPluginsDirPattern, project.getProperty("MPS_PATHS_SELECTOR"))
} else {
    ext.mpsPluginsDir = sprintf(mpsPluginsDirPattern, "MPS$mpsMajor")
}
*/

ext.releaseRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr'
ext.snapshotRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'
ext.publishingRepository = version.toString().endsWith("-SNAPSHOT") ? snapshotRepository : releaseRepository


configurations {
    mps
    languageLibs
}

dependencies {
    mps "com.jetbrains:mps:$mpsVersion"
    languageLibs "com.mbeddr:platform:$mbeddrVersion"
}

repositories {
    mavenLocal()
    for (repoUrl in project.dependencyRepositories) {
        maven {
            url repoUrl
        }
    }
}

ext.skipResolveMps = project.hasProperty('mpsHomeDir')
ext.mpsHomeDir = rootProject.file(project.findProperty('mpsHomeDir') ?: "$buildDir/mps")

if (project.skipResolveMps) {
    task resolveMps {
        doLast {
            logger.info "MPS resolution skipped"
            logger.info "MPS home: " + mpsHomeDir.getAbsolutePath()
        }
    }
} else {
    task resolveMps(type: Copy) {
        dependsOn configurations.mps
        from {
            configurations.mps.resolve().collect { zipTree(it) }
        }
        into mpsHomeDir
    }
}

// Ant support
configurations {
    ant_lib
}

dependencies {
    ant_lib "org.apache.ant:ant-junit:1.10.1"
}

// tools might be needed later for running test scripts
ext.buildScriptClasspath = project.configurations.ant_lib.fileCollection({
    true
}) + project.files("$project.jdk_home/lib/tools.jar")

buildDir = file('build')
def artifactsDir = new File(buildDir, 'artifacts')
def dependenciesDir = new File(buildDir, 'dependencies')


ext.mps_home = '-Dmps.home=' + mpsHomeDir.getAbsolutePath()
ext.build_dir = '-Dbuild.dir=' + buildDir.path
ext.artifacts_dir = '-Dartifacts.root=' + dependenciesDir.path
ext.pluginVersion = "-DversionNumber=" + version
ext.buildDate = "-DbuildDate=" + new Date().toString()
ext.mbeddr_formal_home = '-Dmbeddr.formal.home=' + rootDir
ext.skipUnmodifiedModels = "-Dmps.generator.skipUnmodifiedModels=true" //incremental build support

// ___________________ utilities ___________________

def defaultScriptArgs = [mps_home, build_dir, artifacts_dir, ext.buildDate, ext.pluginVersion, ext.skipUnmodifiedModels]

// enables https://github.com/mbeddr/mps-gradle-plugin#providing-global-defaults
ext["itemis.mps.gradle.ant.defaultScriptArgs"] = defaultScriptArgs
ext["itemis.mps.gradle.ant.defaultScriptClasspath"] = buildScriptClasspath

task resolveLanguageLibs(type: Copy) {
    from {
        configurations.languageLibs.resolve().collect { zipTree(it) }
    }
    into dependenciesDir
}

task generateLibrariesXml(type: GenerateLibrariesXml) {
    dependsOn resolveLanguageLibs
    description "Will read project libraries from projectlibraries.properties and generate libraries.xml in .mps directory. Libraries are loaded in mps during start."
    defaults rootProject.file('projectlibraries.properties')
    overrides rootProject.file('projectlibraries.overrides.properties')
    destination file('code/languages/com.mbeddr.formal.nusmv/.mps/libraries.xml')
}

task setup {
    dependsOn generateLibrariesXml
    description 'Set up MPS project libraries. Libraries are read in from projectlibraries.properties file.'
}

task build_allScripts(type: BuildLanguages, dependsOn: [resolveMps]) {
    script "$rootDir/scripts/build_all_scripts.xml"
}

task build_smv_languages(type: BuildLanguages, dependsOn: [build_allScripts, resolveLanguageLibs]) {
    script new File("$rootDir/build/build-nusmv-languages.xml")
}

task build_fasten_distribution(type: RunAntScript, dependsOn: [build_smv_languages]) {
    script new File("$rootDir/build/build-fasten-distribution.xml")
}

task run_smv_tests(type: TestLanguages, dependsOn: build_smv_languages) { 
    description "Will execute all tests from command line"
    print "mbeddr.formal.home = " + rootDir;
	script new File("$rootDir/build/build-nusmv-tests.xml")
}

//

// Ant <junit> task support
repositories {
    mavenCentral()
}
configurations {
    junitAnt
}
dependencies {
    junitAnt 'junit:junit:4.12'
    junitAnt('org.apache.ant:ant-junit:1.9.7') {
        transitive = false
    }
    junitAnt('org.apache.ant:ant-junit4:1.9.7') {
        transitive = false
    }
}

task cleanMps(type: Delete) {
    delete fileTree(dir: projectDir, include: ["**/classes_gen/**", "**/source_gen/**", "**/source_gen.caches/**", "tmp/**"])
}

//clean.dependsOn cleanMps


defaultTasks 'build_fasten_distribution'
task test(dependsOn: run_smv_tests)

task rebuild(dependsOn:[clean, build_smv_languages])

